/* pager: {
    view:"pager",
    id:"paging_here",
    size:25,
    group:3,
    on: {
        onItemClick: function(id, e, node) {
             var new_page = parseInt(id)+1;
             console.log("users?page=" + new_page + "&size=26");
             $$("paging_here").clearAll();
             $$("zsi_pos_table").define("url", "users?page=" + new_page + "&size=26");
        }
    }
} */

/*
on: {
    onDataRequest: function(start,count) {
        console.log("=========");
        console.log("START: " + start);
        console.log("COUNT: " + count);
        console.log("=========");
    },
},
*/

/* console.log(grid);
grid.loadNext(25, pos, function(){
    this.showItemByIndex(pos);
    pos += 25;
}); */

/*

var table = $$('zsi_pos_table');

var store = new webix.DataCollection(getDataCollection(table, 'tableDataCollection'));
var dp = new webix.DataProcessor(getDataProcessor(store));

table.load(datapoint);

var getDataProcessorDefinition = function() {
            return {
                url: datapoint,
                undoOnError: true,
                datatype: "json",
                save: {
                    "insert": "data?operation=insert",
                    "update": "data?operation=update",
                    "delete": "data?operation=delete",
                },
                on: {
                    onValidationError: function(id, obj, details) {
                        webix.message({type: "error", text: "Проверьте правильность заполнения полей"});
                    },
                    onAfterSave: function () {
                        webix.message("Данные изменены");
                    },
                    onBeforeSaveError: function (id, status, response, details) {
                        var errDetail = null;
                        try {
                            errDetail = JSON.parse(details.text);
                        }
                        catch (e) {
                        }
                        if (errDetail && errDetail.errMsg)
                            webix.message({type: "error", text: errDetail.errMsg});
                        else
                            webix.message({type: "error", text: "Неизвестная ошибка при сохранении изменений"});
                    },
                }
            };
        },

        getDataCollectionDefinition = function(dsid, masterGrid) {
            return {
                url: datapoint,
                datatype: "json",
                on: {
                    onLoadError: function (text, xml, xhr) {
                        var errAnswer = null;
                        try {
                            errAnswer = JSON.parse(text);
                        } catch (e) {

                        }
                        if (errAnswer == null || errAnswer.errType == null) {
                            webix.message({type: "error", text: "Произошла неизвестная ошибка при загрузке данных"});
                            return;
                        }
                        webix.message({type: "error", text: "Ошибка загрузки данных: " + errAnswer.errMsg});

                    },
                    onBeforeLoad: function () {
                        if (masterGrid)
                            masterGrid.showOverlay("Загрузка...");
                    },
                    onAfterLoad: function () {
                        if (masterGrid)
                            masterGrid.hideOverlay();
                    },
                }
            };
        },

      getDataProcessor = function(master) {
			    var dataprocessor = getDataProcessorDefinition("someIdentifier");
			    dataprocessor.master = master;
			    dataprocessor.rules = {
            /*
              "name": webix.rules.isNotEmpty,
              "ap_category_id": webix.rules.isNotEmpty,
              "ap_trademark_id": webix.rules.isNotEmpty,
              */
              //"art_weight": webix.rules.isNumber,

			    };
			    return dataprocessor;
		  },

		  getDataCollection = function(id) {
			    var datacollection = getDataCollectionDefinition();
			    if (id)
				      datacollection.id = id;
			    return datacollection;
		  };

*/

